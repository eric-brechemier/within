{"name":"Within","tagline":"within is a factory of semi-private spaces where events and properties can be shared in isolation","body":"API\r\n---\r\n\r\nFunction: `within( name, callback )`  \r\nCreate a semi-private space to share events and properties\r\n\r\nBoth name and callback can be omitted, resulting in three different forms\r\ndescribed in the sections below.\r\n\r\n  * [`within( name, callback ): any` - run code in the space with given name]\r\n    [WITHIN2]\r\n  * [`within( name ): function` - access the space with given name]\r\n    [WITHIN1]\r\n  * [`within(): function` - create an anonymous space]\r\n    [WITHIN0]\r\n\r\n[WITHIN2]: #within2\r\n[WITHIN1]: #within1\r\n[WITHIN0]: #within0\r\n\r\n### <a name=\"within2\">`within( name, callback ): any`</a> ###\r\n\r\nRun the given callback in the space with given name and return the result\r\nof the callback (left as undefined if missing).\r\n\r\nThis form allows to create modules that span multiple source files\r\nbefore concatenation.\r\n\r\n    // module1-part1.js\r\n    within( \"example.org/module1\", function( publish, subscribe, get, set ) {\r\n      // definition of module 1, part 1\r\n    });\r\n\r\n    // module1-part2.js\r\n    within( \"example.org/module1\", function( publish, subscribe, get, set ) {\r\n      // definition of module 1, part 2\r\n    });\r\n\r\n    // module1-part3.js\r\n    within( \"example.org/module1\", function( publish, subscribe, get, set ) {\r\n      // definition of module 1, part 3\r\n    });\r\n\r\nA module is identified by a domain name and a path forming the module name\r\nwhich roughly corresponds to a space where you would be able to publish\r\ncontents on the Web (although you don't have to):\r\n\r\n    \"example.tld/hypothetic/path/to/module\"\r\n\r\nThe intent is to avoid clashes with modules defined by different people and\r\norganizations, or even yourself in the future.\r\n\r\nThe callback function runs immediately, within the context of an object\r\nthat holds data for the module; the same object is provided in all parts\r\nof the module:\r\n\r\n    within( \"example.org/module1\", function( publish, subscribe, get, set ) {\r\n      // 'this' refers to semi-private module data\r\n    });\r\n\r\nFour functions are provided as arguments to the callback to interact with\r\nthe space, publish and subscribe to events and share data within the confines\r\nof this shared symbolic space:\r\n\r\n* `publish( name, value )` - set the value of a property and publish an event\r\n* `subscribe( name, listener[, now])` - subscribe to an event\r\n* `get( name )` - get the value of a property in space data\r\n* `set( name, value )` - set the value of a property in space data\r\n\r\nThe `publish()` function notifies registered listeners of the occurrence of\r\nan event in the module together with the current value of the associated\r\nproperty. A common use case is to call `publish()` twice in a row,\r\nwith a verb in the active form and the same verb in passive form:\r\n\r\n    publish( \"start\", {\r\n      // configuration properties\r\n    });\r\n    publish( \"started\", true );\r\n\r\nListeners for `\"start\"` may process provided data in turn while listeners\r\nfor `\"started\"` will get notified once the processing completes:\r\n\r\n    subscribe( \"start\", function( config ) {\r\n      // configure some behavior using provided properties\r\n    });\r\n\r\n    subscribe( \"started\", function() {\r\n      // start using the configured behavior\r\n    });\r\n\r\nThe value of the event is also set to the property of the same name:\r\n\r\n    subscribe( \"start\", function( config ) {\r\n      // get( \"start\" ) === config; // true\r\n    });\r\n\r\nWhen no value is provided in the call to `publish()`, it defaults to the\r\nboolean value `true`:\r\n\r\n    publish( \"started\" );\r\n\r\n    subscribe( \"started\", function() {\r\n      // get( \"started\" ) === true; // true\r\n      // start using the configured behavior\r\n    });\r\n\r\nWhen a listener is registered for an event while the property of the same\r\nname has already been set, `subscribe()` fires the listener immediately\r\nwithout waiting for the next call to `publish()`:\r\n\r\n    publish( \"started\" );\r\n\r\n    subscribe( \"started\", function( value ) {\r\n      // called immediately with the current value of the property:\r\n      // get( \"started\" ) === true;\r\n    });\r\n\r\nNote that it is also the case when the property has only been set\r\nand never published before:\r\n\r\n    // no call to publish( \"started\" ) before\r\n    set( \"started\", true );\r\n\r\n    subscribe( \"started\", function( value ) {\r\n      // called immediately with the current value of the property:\r\n      // get( \"started\" ) === true;\r\n    });\r\n\r\nThis default behavior can be avoided by setting the optional third\r\nparameter `now` to `false` in the call to `subscribe()`:\r\n\r\n    publish( \"redraw\" );\r\n\r\n    subscribe( \"redraw\", function() {\r\n      // subscription starts with next 'redraw' event\r\n    }, false);\r\n\r\nFor convenience, `this` also refers to the space data object in listeners\r\nfor events of the module:\r\n\r\n    subscribe( \"start\", function() {\r\n      // 'this' refers to the module data\r\n      this.score = 0;\r\n    });\r\n\r\nThe `get()` and `set()` functions simply get and set properties in the space\r\ndata, without publishing any event. Since the data object can also be\r\naccessed as `this` in the callback function, properties can also be set\r\nand retrieved directly:\r\n\r\n    within( \"example.org/module1\", function( publish, subscribe, get, set ) {\r\n      // 'this' refers to semi-private space data\r\n      this.property = 'value';\r\n\r\n      // equivalent to:\r\n      set('property', 'value');\r\n    });\r\n\r\nThe advantage of `get()` over direct access through `this` is that it only\r\nretrieves the value of *own* properties stored directly in the data object,\r\nand not the value of properties *inherited* from the Object prototype chain,\r\nwhich allows to use the data object as a hash, without tripping on\r\n[special names such as 'constructor' or 'hasOwnProperty'][OBJECT_PROTOTYPE]:\r\n\r\n    within( \"example.org/module1\", function( publish, subscribe, get, set ) {\r\n      // 'constructor' is inherited from Object prototype\r\n      typeof this.constructor === 'function'; // true\r\n\r\n      // inherited properties are ignored by get()\r\n      typeof get('constructor') === 'function'; // false\r\n    });\r\n\r\n[OBJECT_PROTOTYPE]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/prototype\r\n\r\nThe advantage of `set()` compared with directly setting a value through `this`\r\nis that the `set()` function remains accessible in all functions defined\r\nwithin the callback function provided as argument to `within()`, unlike `this`\r\nwhich varies as the calling context of each function changes:\r\n\r\n    within( \"example.org/module1\", function( publish, subscribe, get, set ){\r\n\r\n      // 'this' refers to space data\r\n      // get() and set() allow to get/set properties in space data\r\n\r\n      function innerFunction() {\r\n        // 'this' no longer refers to space data\r\n        // get() and set() still allow to get/set properties in space data\r\n      }\r\n\r\n      innerFunction();\r\n    });\r\n\r\n### <a name=\"within1\">`within( name ): function`</a> ###\r\n\r\nAccess the space with given name.\r\n\r\nThe space function can be called to run code in the space.\r\nIt returns the result of the callback, if any:\r\n\r\n    var space = within( \"example.org/module1\" );\r\n\r\n    // run code in the space \"example.org/module1\"\r\n    var value = space(function( publish, subscribe, get, set ) {\r\n      var result;\r\n      ...\r\n      return result;\r\n    });\r\n\r\nwhich is equivalent to:\r\n\r\n    // run code in the space \"example.org/module1\"\r\n    var value = within( \"example.org/module1\", function( pub, sub, get, set ) {\r\n      var result;\r\n      ...\r\n      return result;\r\n    });\r\n\r\nThe space has four methods which are the same functions provided as\r\nparameters to the callback: `publish`, `subscribe`, `get`, `set`.\r\n\r\nThis is a shortcut intended for use in debugging:\r\n\r\n    console.log( within( \"example.org/game\" ).get( \"score\" ) );\r\n    within( \"example.org/game\" ).set( \"score\", 0 );\r\n    within( \"example.org/game\" ).subscribe( \"bonus\", function( bonus ){\r\n      console.log( bonus );\r\n    });\r\n    within( \"example.org/game\" ).publish( \"bonus\", 100 );\r\n\r\nThe above form is more redundant but easier to type in the console,\r\ndue to reduced indentation level compared with the equivalent form below:\r\n\r\n    within( \"example.org/game\", function( publish, subscribe, get, set ){\r\n      console.log( get( \"score\" ) );\r\n      set( \"score\", 0 );\r\n      subscribe( \"bonus\", function( bonus ){\r\n        console.log( bonus );\r\n      });\r\n      publish( \"bonus\", 100 );\r\n    });\r\n\r\nThe shorter form is also useful when interacting with a space from within\r\nanother space:\r\n\r\n    within( \"example.org/test\", function( publish, subscribe, get, set ){\r\n\r\n      var game = within( \"example.org/game\" );\r\n\r\n      game.subscribe( \"bonus\", function( bonus ){\r\n        var score = game.get( \"score\" );\r\n        game.set( \"score\", score + bonus );\r\n      });\r\n\r\n      game.publish( \"bonus\", 100 );\r\n\r\n    });\r\n\r\nThe short form above is more readable due to reduced nesting, and less\r\nconfusing than the longer form below which uses the same function names\r\n`publish`, `subscribe`, `get`, `set` for the methods of two different spaces:\r\n\r\n    within( \"example.org/test\", function( publish, subscribe, get, set ){\r\n      // publish, subscribe, get, set are methods of space \"example.org/test\"\r\n\r\n      within( \"example.org/game\", function( publish, subscribe, get, set ){\r\n        // publish, subscribe, get, set are methods of \"example.org/game\"\r\n\r\n        subscribe( \"bonus\", function( bonus ){\r\n          var score = get( \"score\" );\r\n          set( \"score\", score + bonus );\r\n        });\r\n\r\n        publish( \"bonus\", 100 );\r\n      });\r\n\r\n    });\r\n\r\n### <a name=\"within0\">`within(): function`</a>  ###\r\n\r\nCreate an anonymous space.\r\n\r\nThe anonymous space function can be called to run code within,\r\nand has the four methods `publish`, `subscribe`, `get` and `set`\r\nto interact with the space directly.\r\n\r\n    var space = within();\r\n\r\n    // run code in the anonymous space\r\n    var value = space(function( publish, subscribe, get, set ) {\r\n      var result;\r\n      ...\r\n      return result;\r\n    });\r\n\r\n    // interact with the space directly\r\n    space.set('property', 'value');\r\n    var value = space.get('property');\r\n    space.publish('property', value);\r\n    space.subscribe('property', function(value){ ... });\r\n\r\nEach call to within() without any argument results in the creation of a\r\ndifferent anonymous space, for single use:\r\n\r\n    // 3 separate anonymous spaces,\r\n    // with separate events and properties\r\n    var space1 = within(); // a first anonymous space\r\n    var space2 = within(); // a second anonymous space\r\n    var space3 = within(); // a third anonymous space\r\n\r\nNo reference is kept in the factory for any anonymous space.\r\n\r\nReferences to named spaces on the other hand are preserved for the lifetime\r\nof the application, unless you delete references to these spaces yourself\r\nfrom the two hashes `'data'` and `'subscribers` of `'within.js.org'`.\r\nIf you want to manage this cache separately, you can use anonymous spaces\r\ninstead, which are forgotten as soon as they are out of the factory.\r\n\r\nAn anonymous space can be created for each instance of an application,\r\nor more generally each instance in a collection:\r\n\r\n    function Item() {\r\n      var space = within(); // create a new space for single use\r\n\r\n      function publish( name, value ){\r\n        // publish an event only for this item\r\n        space.publish( name, value );\r\n      }\r\n\r\n      // each item can process its own events\r\n      // without additional filtering required\r\n    }\r\n\r\nAn alternative would be to assign a different id to each item in the\r\ncollection, and use it to customize either the event name or the data:\r\n\r\n    // customize the event name using the id\r\n    publish( \"example.org/collection/\" + id, data );\r\n\r\n    // the subscription must build the event name in the same way\r\n    subscribe( \"example.org/collection/\" + id, function( data ) {\r\n      // process the event\r\n    });\r\n\r\n    // customize the data using the id\r\n    data.id = id;\r\n    publish( \"example.org/collection\", data );\r\n\r\n    subscribe( \"example.org/collection\", function( data ) {\r\n      // an extra filter is required in the event subscriber\r\n      if ( data.id !== id ) {\r\n        return;\r\n      }\r\n\r\n      // process the event\r\n    });\r\n\r\n### <a name=\"within_within\">`within( 'within.js.org' )`</a> ###\r\n\r\nThe library within.js itself publishes useful properties and events in the\r\nnamespace 'within.js.org' (which is\r\n[the public URL of its documentation](http://within.js.org)):\r\n\r\n* `version` - string, the version of the library\r\n* `missing` - object, initially null, value of the `'missing'` event\r\n  published when a subscription is created before the target\r\n  property has been set. The event object has two properties:\r\n  * space - string, the name of the data space\r\n  * property - string, the name of the property with no value\r\n* `data` - object, hash of all named data spaces; each property is the\r\n           name of a data space and the value is the corresping object\r\n           which holds data for the space. This is the same object provided\r\n           as context to functions which run `within()` this space.\r\n* `subscribers` - object, hash of data space names to objects which store\r\n                  the lists of subscribers for each property of the space;\r\n                  these objects are themselves hashes where property names\r\n                  are associated with arrays of functions subcribed to the\r\n                  corresponding events.\r\n\r\nRELEASE HISTORY\r\n---------------\r\n\r\n* v1.0.0 - Stable API\r\n* v1.1.0 - Add version number in `within('within.js.org').get('version')`\r\n* v1.2.0 - Add third parameter `now` to subscribe(), to delay subscriptions\r\n* v1.3.0 - Publish event `'missing'` within `'within.js.org'` to report\r\n           subscriptions to a property before any value has been set.\r\n* v1.4.0 - Store data spaces in `within('within.js.org').get('data')` and\r\n           event subscriptions in `within('within.js.org').get('subscribers')`\r\n           to allow listing data spaces and subscribers for debugging purpose,\r\n           and deleting data spaces and subscribers to free memory if need be.\r\n\r\nLANGUAGE\r\n---------\r\n\r\nJavaScript  \r\n\r\nAUTHOR\r\n------\r\n\r\nEric Bréchemier  \r\nhttp://eric.brechemier.name\r\n\r\nLICENSE\r\n-------\r\n\r\nCC0 - No Copyright  \r\nhttps://creativecommons.org/publicdomain/zero/1.0/\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}